
{
"file": {
"fileName": "AttendanceManager\_Development\_Summary.md",
"content": "\# AttendanceManager アプリ開発の軌跡\\n\\n提供された会話ログを基に、大学生向け授業欠席管理アプリ「AttendanceManager」の開発過程で最終的に実装された機能、UIの詳細、そして発生した主要なエラーとそ​​の対策を以下にまとめます。\\n\\n\#\# 1. 最終的に実装された機能\\n\\n会話を通じて、多岐にわたる機能が要求・実装されました。主要な機能は以下の通りです。\\n\\n\#\#\# 1.1. 時間割管理\\n\* **前期・後期システム**: アプリは前期と後期の2つの独立した時間割を管理できます。画面右上のボタンでいつでも切り替えが可能です。\\n\* **時間割グリッド**: 月曜日から金曜日の1限から5限までの時間割を表示します。\\n\* **時限時間の設定**: 各時限の開始・終了時刻をタップで編集できます。編集UIはiOSのアラーム設定のようなホイールピッカー形式で、大学の一般的な授業時間を初期値として予測表示します。\\n\\n\#\#\# 1.2. 授業管理\\n\* **授業の追加と割り当て**: 空きコマをタップすると、新しい授業情報を直接入力して作成するか、既に登録済みの「既存の授業」から選択して時間割に割り当てることができます。\\n\* **授業情報の属性**: 各授業には以下の情報が設定・編集可能です。\\n    \* 授業名\\n    \* 総授業数\\n    \* **欠席可能回数**: ユーザーが自由に入力でき、デフォルトは5回です。\\n    \* **期間**: 「半期」または「通年」を選択できます。\\n    \* **識別カラー**: 12色のパレットから授業固有の色を選択できます。\\n\* **通年科目のデータ共有**: 「通年」に設定された科目は、前期と後期で出席記録などのデータが完全に同期されます。\\n\* **重複登録の防止**: 同じ名前の授業を新規作成しようとするとアラートが表示され、既存の授業を選択するよう促されます。\\n\* **コマの削除とリセット**: 授業詳細画面から、そのコマを時間割から削除したり、出席履歴のみをリセットしたりできます。\\n\\n\#\#\# 1.3. 出席記録\\n\* **ワンタップ欠席記録**: 時間割のコマをタップするだけで、その授業の欠席が1回記録されます。\\n\* **詳細な記録**: 授業詳細画面から、以下の4種類の記録を追加・編集できます。\\n    \* 欠席\\n    \* 遅刻\\n    \* 早退\\n    \* 公欠\\n\* **カウントの区別**: **欠席のみ**がコマの中央の数字やカラーブロックにカウントされます。遅刻、早退、公欠は記録はされますが、メインの欠席カウントには影響しません。\\n\* **履歴の編集**: 過去の記録をタップすることで、種別、日付、メモを後から編集できます。\\n\\n\#\#\# 1.4. 統計機能\\n\* **統計タブ**: 週単位・月単位ではなく、**月単位・年単位**で出席状況を分析できる統計タブがあります。\\n\* **棒グラフ表示**: 選択した期間内の科目別欠席数を、授業の識別カラーと連動した棒グラフで可視化します。\\n\* **サマリー情報**: 期間内の総欠席数と、学期全体の累計欠席数を表示します。\\n\* **遅刻等の表示**: 遅刻・早退・公欠の回数は、棒グラフの下に小さく目立たない形で表示されます。\\n\\n\#\#\# 1.5. 設定機能\\n\* **外観**: ライトモードとダークモードの切り替えが可能です。\\n\* **データ管理**: 「現在の学期のみ」または「全学期」のデータを一括削除する機能があります。\\n\* **セキュリティ**: パスコードロックおよび、Face ID/Touch IDによる生体認証を設定できます。\\n\* **通知**: 「入力をお忘れですか？」というリマインダー通知を、指定した時間と頻度（毎日/週1回/月1回）で受け取る設定が可能です。\\n\\n\#\#\# 1.6. 開発管理\\n\* **バージョン管理**: プロジェクトはGitで管理されており、GitHubで運用するための手順が整備されています。\\n\* **開発ドキュメント**: 今後の開発のために、以下のファイルが作成されました。\\n    \* `ChangeLog/`: コード変更のたびにログファイルを保存するディレクトリ。\\n    \* `ビルドエラー対策メモ.md`: 発生したビルドエラーとその解決策を記録するファイル。\\n    \* `重要メモ_データ同期問題防止.md`: データの即時反映漏れを防ぐための開発ルールを記したファイル。\\n\\n\*\*\*\\n\\n\#\# 2. 最終的に実装されたUI\\n\\nユーザーからの詳細なフィードバックに基づき、UIは何度も改善されました。\\n\\n\#\#\# 2.1. 時間割画面 (TimetableView)\\n\* **コマのデザイン**:\\n    \* **背景色**: 授業が登録されているコマは白（ダークモードでは黒）。空きコマもアプリ背景色と同じ白で、縁の色を薄く（30%の透明度）することで主張を抑えています。\\n    \* **カラーライン**: 各コマの左端には、授業ごとに設定された識別カラー（12色）の細いラインが表示されます。\\n    \* **空きコマ**: プラス（+）マークのみがシンプルに表示されます。\\n\* **コマのレイアウト**:\\n    \* 上部に科目名（自動でサイズ調整され、全文表示を試みる）。\\n    \* 中央に大きく欠席回数。\\n    \* 下部に欠席回数を示すカラーブロックを2行5列で配置。\\n\* **カラーブロックのロジック**: ユーザーが設定した「欠席可能回数」を基準に、全ブロックの色が統一して変化します。\\n    \* **緑**: 安全圏\\n    \* **オレンジ**: 欠席可能回数の1回前\\n    \* **赤**: 欠席可能回数に到達\\n\* **インタラクション**:\\n    \* **長押しエフェクト**: コマを長押しすると、コマが僅かに拡大し、影が濃くなります。`zIndex`の調整により、どの位置のコマでも他のコマより必ず最前面に表示されるように修正されました。\\n    \* **タップエリア**: コマの枠外をタップしても反応しないよう、タップ範囲が正確に設定されています。\\n\\n\#\#\# 2.2. 授業詳細画面 (CourseDetailView)\\n\* **全体レイアウト**: 縦長のフォーム形式から、情報を論理的にグループ分けした**カードベースのUI**に全面的に再設計されました。\\n\* **出席概要カード**: 最上部に配置され、現在の欠席状況（欠席回数、残り回数、プログレスバー）が一目で分かります。\\n\* **識別カラー選択**: 12色のカラーパレットから色を選択できます。選択中の色にはチェックマークが表示され、UIは縦幅を取らないようコンパクトに設計されています。\\n\* **出席履歴**: 各履歴がシャープな印象のカードで表示されます。「欠席」以外の記録（遅刻など）には専用のアイコンが表示されます。\\n\* **保存/キャンセル**: 変更を加えると「保存」ボタンが有効化され、明示的に保存・破棄を選択する方式です。\\n\\n\#\#\# 2.3. 授業追加画面 (CourseSelectionView)\\n\* **登録ボタンの位置**: 画面下部にあった「登録」ボタンは、キーボードで隠れる問題を解決するため、ナビゲーションバーの右上に配置されました。\\n\* **スクロール**: 既存授業のリスト表示エリアは、当初狭い枠内でのスクロールでしたが、画面全体でスムーズにスクロールできるよう改善されました。\\n\\n\#\#\# 2.4. アニメーション\\n\* **ダークモード**: 切り替え時に、アプリ全体の色が0.3秒かけて滑らかに変化します。\\n\* **通知設定**: 設定画面で通知をONにすると、詳細設定項目（時間・頻度）が上からスライドダウンしながら表示されます。\\n\\n\*\*\*\\n\\n\#\# 3. 会話中の主要なエラーとその対策\\n\\n開発過程では、ビルドエラーから実行時のバグ、UIの不具合まで様々な問題が発生しました。\\n\\n| 問題点                                                                                                                              | 原因分析                                                                                                                                                                 | 対策                                                                                                                                                                                                                                      |\\n| :---------------------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| **プロジェクトが開けない** | AIが生成した初期のXcodeプロジェクトファイル（`.pbxproj`）のフォーマットが破損しており、Xcodeが認識できなかった。                                                              | 正常に動作する既存のプロジェクトをテンプレートとしてコピーし、プロジェクト名や内部の参照文字列を新しいプロジェクト名に一括置換することで、正常なプロジェクトファイル構造を再構築した。                                      |\\n| **データの即時反映漏れ** \<br\> (欠席記録の変更などが別画面にすぐに反映されない)                                      | SwiftUIのViewが、監視対象のオブジェクト（`ObservableObject`）のプロパティ変更を正しく検知できていなかった。特に、プロパティ自体ではなく、その中身（配列の要素など）が変更された場合に起こりやすかった。 | `@ObservedObject`を適切なViewに設定し直し、データ変更時に`objectWillChange.send()`を手動で呼び出してUI更新を強制。最終的には`DataManager`に`refreshTrigger`というBool値を追加し、データ変更時にこの値を反転させることで、View全体を確実に再描画させる仕組みを構築した。 |\\n| **TextFieldに入力できない** \<br\> (複数回発生)                                                             | 主な原因は、プロジェクトのiOSデプロイメントターゲットがベータ版の`18.5`に設定されていたことによるSDKの不整合。また、SwiftUIの`@FocusState`や`.textFieldStyle`の互換性問題も複合的に影響していた。 | デプロイメントターゲットを安定版の`17.0`に修正。不安定な動作をしていた`@FocusState`を削除し、`.textFieldStyle`をシステム標準のものからカスタムスタイルに変更することで問題を解決した。 |\\n| **長押しとタップ操作の競合** | 1つのUI要素に`onTapGesture`と`onLongPressGesture`が設定されており、長押しジェスチャーを終えて指を離した瞬間に、通常のタップとして判定されてしまっていた。                         | `onLongPressGesture`が持つ`onPressingChanged`クロージャや、`tapHandled`というBool型の状態変数（フラグ）を導入。長押しが開始されたらフラグを立て、タップ操作を無効化することでジェスチャーの競合を防いだ。     |\\n| **同一科目の誤削除** | 授業詳細画面でコマを削除する際、授業名（`course.id`）だけで削除対象を検索していたため、同じ授業が複数配置されている場合に、意図しない（最初に見つかった）コマが削除されていた。 | 授業詳細画面を開く際に、どのコマ（`TimeSlot`）から開かれたかの情報を一緒に渡すように変更。削除処理では、その特定の`TimeSlot`のみを対象とすることで、正確なコマ削除を実現した。                                   |\\n| **データ永続性の欠如** \<br\> (アプリを再起動するとデータが消える)                                                       | 当初のデータモデル（`TempDataModel`）がメモリ上でのみデータを保持しており、永続化の仕組みがなかった。                                                                         | SwiftDataを用いた永続化を試みたが、ビルドエラーが頻発し、会話の複雑性が増したため断念。最終的には、ユーザーの要求に基づき、元のメモリベースのデータモデルに戻し、その改善を継続する方針となった。**（注：この問題は未解決のままです）** |\\n| **頻発したビルドエラー** \<br\> (型不整合、Switch文の網羅性など)                                                   | SwiftData導入とロールバックの過程で、データモデルの型（`Course` vs `PersistentCourse`など）がコード全体で不整合になった。また、enumにケースを追加した際に`switch`文の修正漏れがあった。 | エラーメッセージを一つずつ読み解き、`grep`や`search`で関連箇所を特定。型の置換、`guard let`や`??`による安全なオプショナル値の展開、不足している`case`の追加などを系統的に行い、ビルドが通る状態に修正した。 |"
}
}